{"version":3,"sources":["assests/logo.svg","Person/Person.tsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","div","person","props","button","App","state","persons","id","name","location","otherState","showPersons","nameChangeHandler","event","personIndex","findIndex","p","target","value","setState","switchNameHandler","deletePersonHandler","splice","togglePersonHandler","doesShow","style","backgroundColor","font","border","padding","cursor","color","this","map","index","Person","click","key","changed","classes","length","push","className","join","onClick","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,+bCIzBC,IAAOC,IAAV,KAAf,IA+BeC,EAhBD,SAACC,K,4OCbKH,IAAOI,OAAV,KAAjB,IAgIeC,E,4MAjHbC,MAAQ,CACNC,QAAS,CACP,CAAEC,GAAI,KAAMC,KAAM,UAAWC,SAAU,eACvC,CAAEF,GAAI,KAAMC,KAAM,UAAWC,SAAU,eACvC,CAAEF,GAAI,KAAMC,KAAM,QAASC,SAAU,UAEvCC,WAAY,mBACZC,aAAa,G,EAGfC,kBAAoB,SAAEC,EAAON,GAC3B,IAAMO,EAAc,EAAKT,MAAMC,QAAQS,WAAU,SAAAC,GAC/C,OAAOA,EAAET,KAAOA,KAGZN,EAAM,eACP,EAAKI,MAAMC,QAAQQ,IAGxBb,EAAOO,KAAOK,EAAMI,OAAOC,MAE3B,IAAMZ,EAAO,YAAO,EAAKD,MAAMC,SAC/BL,EAAOa,GAAeb,EAGtB,EAAKkB,SAAW,CAACb,QAASA,K,EAG3Bc,kBAAoB,WAEnB,EAAKD,SAAS,CACZb,QAAS,CACP,CAAEE,KAAM,oBAAqBC,SAAU,eACvC,CAAED,KAAM,oBAAqBC,SAAU,eACvC,CAAED,KAAM,eAAgBC,SAAU,a,EAKxCY,oBAAsB,SAACP,GAErB,IAAMR,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQgB,OAAOR,EAAa,GAC5B,EAAKK,SAAS,CAACb,QAASA,K,EAG1BiB,oBAAsB,WACpB,IAAMC,EAAW,EAAKnB,MAAMM,YAC5B,EAAKQ,SAAS,CAACR,aAAca,K,uDAGpB,IAAD,OACFC,EAAQ,CACZC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,UACR,SAAU,CACRJ,gBAAiB,aACjBK,MAAO,UAIPzB,EAAU,KAEV0B,KAAK3B,MAAMM,cACbL,EACE,6BACG0B,KAAK3B,MAAMC,QAAQ2B,KAAI,SAAChC,EAAQiC,GAC/B,OAAO,kBAACC,EAAD,CACPC,MAAS,kBAAM,EAAKf,oBAAoBa,IACxC1B,KAAQP,EAAOO,KACfC,SAAYR,EAAOQ,SACnB4B,IAAOpC,EAAOM,GACd+B,QAAS,SAACzB,GAAD,OAAW,EAAKD,kBAAkBC,EAAOZ,EAAOM,WAK/DkB,EAAMC,gBAAgB,MACtBD,EAAK,MAAY,CACfC,gBAAiB,SACjBK,MAAO,UAIX,IAAMQ,EAAU,GAQhB,OAPIP,KAAK3B,MAAMC,QAAQkC,QAAS,GAC9BD,EAAQE,KAAK,OAEXT,KAAK3B,MAAMC,QAAQkC,QAAS,GAC9BD,EAAQE,KAAK,QAIb,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,iDACA,uBAAGA,UAAWH,EAAQI,KAAK,MAA3B,oBACE,iCACAlB,MAASA,EACTmB,QAASZ,KAAKT,qBAFd,YAGCjB,EACD,kBAAC6B,EAAD,CAAQ3B,KAAK,qBAAb,sC,GAzGMqC,aCREC,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.54098e85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.60d43765.svg\";","import React from 'react';\nimport Radium from 'radium';\nimport styled from 'styled-components';\n\nconst StyledDiv = styled.div`\n    width: 60%;\n    margin: 16px auto;\n    border: 1px solid #eee;\n    box-shadow: 0 2px 3px #ccc;\n    padding: 16px;\n    text-align: center;\n\n    @media (min-width: 500px) {\n            width: 450px;\n    }\n\n`;\n\n\nconst person =(props) => {\n    const style = {\n        '@media (min-width: 500px)' : {\n            width: '450px'\n        }\n    };\n    return (\n        //<div className=\"Person\" style={style} >\n            <StyledDiv>\n            <p onClick={props.click}>This is a {props.name} and I live in City: {props.location}</p>\n            <p>{props.children}</p>\n            <input type=\"text\" onChange={props.changed} value={props.name} />\n            </StyledDiv>\n    )\n};\n\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './assests/logo.svg';\nimport Person from \"./Person/Person\";\nimport styled from 'styled-components';\n\nconst styedButton = styled.button`\nbackgroundColor: green,\nfont: inherit,\nborder: 1px solid blue,\npadding: 8px,\ncursor: pointer,\n&:hover': {\n  backgroundColor: lightgreen,\n  color: black\n}\n\n`;\n \n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: 'a1', name: \"Srinath\", location: \"Bentonville\" },\n      { id: 'a2', name: \"Keerthi\", location: \"Bentonville\" },\n      { id: 'a3', name: \"Lucky\", location: \"India\" },\n    ],\n    otherState: \"some other value\",\n    showPersons: false\n  }\n\n  nameChangeHandler = ( event, id ) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    person[personIndex] = person;\n\n\n    this.setState ( {persons: persons});\n  }\n\n   switchNameHandler = () => {\n    //console.log(\"Was Clicked!\");\n    this.setState({\n      persons: [\n        { name: \"Srinath KUNAMALLA\", location: \"Bentonville\" },\n        { name: \"Keerthi Kunamalla\", location: \"Bentonville\" },\n        { name: \"Lucky Routhu\", location: \"India\" }\n      ],\n    });\n  };\n\n  deletePersonHandler = (personIndex) => {\n    //const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons})\n  }\n\n  togglePersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  }\n\n  render () {\n    const style = {\n      backgroundColor: 'green',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons =(\n        <div>\n          {this.state.persons.map((person, index) => {\n            return <Person \n            click = {() => this.deletePersonHandler(index)}\n            name = {person.name }\n            location ={ person.location }\n            key = {person.id}\n            changed={(event) => this.nameChangeHandler(event, person.id)}\n            />\n          })}\n        </div>\n      );\n      style.backgroundColor='red';\n      style['hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      }\n    }\n\n    const classes = [];\n    if (this.state.persons.length <=2 ) {\n      classes.push('red');\n    }\n    if (this.state.persons.length <=1 ) {\n      classes.push('bold');\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Srinath Kunamalla</h1>\n          <p className={classes.join(' ')}>React Programmer</p>\n            <styedButton \n            style = {style}\n            onClick={this.togglePersonHandler}>Click me</styedButton>\n            {persons}\n            <Person name=\"Srinath Kunamalla\">\n              My Hobbies: Gaming          </Person>\n          </header>\n      </div>\n    );\n  };\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}